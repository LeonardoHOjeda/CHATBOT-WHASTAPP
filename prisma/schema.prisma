// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int          @id @default(autoincrement())
  email          String       @unique
  name           String
  lastName       String       @map("last_name")
  password       String
  role           Role         @relation(fields: [roleId], references: [id])
  roleId         Int          @map("id_role")
  createdAt      DateTime     @default(now()) @map("created_at")
  profilePicture String       @map("profile_picture")
  UserSenders    UserSender[]
  Notes          Note[]

  @@map("user")
}

model Role {
  id    Int    @id @default(autoincrement())
  role  String
  Users User[]

  @@map("roles")
}

model Sender {
  id                   Int            @id @default(autoincrement())
  name                 String
  phone                String         @unique
  email                String?
  profilePicture       String?        @map("profile_picture")
  budget               Float
  createdAt            DateTime       @default(now()) @map("created_at")
  UserSenders          UserSender[]
  ConversationAsClient Conversation[] @relation(name: "ClientRelation")
  ConversationAsAdmin  Conversation[] @relation(name: "AdminRelation")

  @@map("senders")
}

model UserSender {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("id_user")
  user      User     @relation(fields: [userId], references: [id])
  senderId  Int      @map("id_sender")
  sender    Sender   @relation(fields: [senderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime @default(now())

  @@map("user_sender")
}

model Conversation {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now()) @map("created_at")
  clientId           Int                 @map("id_client")
  client             Sender              @relation(name: "ClientRelation", fields: [clientId], references: [id])
  adminId            Int                 @map("id_admin")
  admin              Sender              @relation(name: "AdminRelation", fields: [adminId], references: [id])
  Messages           Message[]
  Notes              Note[]
  LabelConversations LabelConversation[]

  @@unique([clientId, adminId])
  @@map("conversations")
}

model Message {
  id             Int          @id @default(autoincrement())
  conversationId Int          @map("id_conversation")
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  message        String
  createdAt      DateTime     @default(now()) @map("created_at")
  seen           Boolean      @default(false)
  isFromMe       Boolean      @map("is_from_me")

  @@map("messages")
}

model Note {
  id             Int          @id @default(autoincrement())
  conversationId Int          @map("id_conversation")
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  userId         Int          @map("id_user")
  user           User         @relation(fields: [userId], references: [id])
  note           String
  createdAt      DateTime     @default(now()) @map("created_at")

  @@map("notes")
}

model Label {
  id                 Int                 @id @default(autoincrement())
  name               String
  backgroundColorId  Int                 @map("id_background_color")
  Color              Color               @relation(fields: [backgroundColorId], references: [id])
  createdAt          DateTime            @default(now()) @map("created_at")
  LabelConversations LabelConversation[]

  @@map("labels")
}

model LabelConversation {
  id             Int          @id @default(autoincrement())
  labelId        Int          @map("id_label")
  label          Label        @relation(fields: [labelId], references: [id])
  conversationId Int          @map("id_conversation")
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime     @default(now()) @map("created_at")

  @@map("label_conversations")
}

model Color {
  id     Int     @id @default(autoincrement())
  name   String
  hex    String
  isDark Boolean @map("is_dark")
  Label  Label[]

  @@map("colors")
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
